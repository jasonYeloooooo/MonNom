Lazy JIT, probably want two compilation modes:
- First pass
  - Local profiling
  - No reg alloc?
  - No versioning? Probably still want versioning to keep information
  - Threshold to recompile
- Optimized
  - Versioning
  - On the fly reg alloc
- No interpreter
  - Turn interpreter ops into library calls

Register allocation:
Since we're focusing on eliminating type tests still, do we not want to have
any register allocation at all, or to have the allocation simply be distinct
from the versioning? Probably the latter?
- Jump to version should ignore RA at dst
- Not factored in version compatibility

Type representation:
- Basic type tags
- Closure, object, array, etc. for sure
- Numerical, array element types (int array, float array)
  - Test < length, if value is array, if only saw floats up to date, flag array
  - Also need to know that index is always incremented by 1
- Could technically all be implemented as type tags?
  - May also want which map an object belongs to

Interprocedural versioning:
- Multiple function entry points, created on-demand, lazily
  - Versioning on the function entry block
  - Limited number allowed
  - GC'd when dead
- Multiple return points?
  - Callee usually doesn't know who the caller is
  - Could have a few addresses for most common types (unknown, int, float, object)
  - Can also test after return based on profiling info (if worthwhile)

Local profiling:
- Branch edge counts
- Could also just maintain short block execution history buffer
  - Last executed path
  - Issue: optimized code doesn't provide this
- Value profiles
  - function returns
  - argument types
  - property accesses
  - type tests
- Callees at call sites

No interpreter: what about exceptions?
- Still need consistent stack frame layout

Inlining
- Want to inline at hottest call sites, relative hottest
  - Could we base this on a linked-list swap algorithm?
  - Or simply go through list of call sites, sort by count
  - Probably not that many call sites
- Want to be able to inline incrementally, hottest callees first
- Inline in optimized mode only (hot code)
- Inline deep. Should work better since incremental
- Marc: call non-inlined version for some cases?

Incremental compilation:
- Need fast assembler
  - No assembler peepholes, no fancy encoding, mostly "one pass"
- Dynamically allocate executable memory blocks for functions
  - Probably in page-sized chunks?
  - Allocate all in the same 4GB space, for relative 32-bit jumps?
- Stubs patch jump addresses as needed
- When re-compiling optimized code, try to order code so hot paths are linear
- May want ability to invalidate code, kill jumps to it, replace by jump to stub
  - If optimizing some blocks, need to re-patch jumps to these blocks
  - In general, can re-optimize an entire linear sequence. 
  - Re-patch jumps that aren't just fall-throughs?
- Do we want the ability to displace code?
  - Could possibly map whole 4GB code space, try to work in lowest addresses
    - Not all immediately allocated by OS
  - GC unreferenced/dead code
  - Periodically move code based on who jumps to who, eliminate jumps
- Probably want global code manager, not per-function memory space?
- Code will mix optimized versions with unoptimized (profiling versions) ****
- Need to GC old unneeded versions!

Roadmap:
- Assembler/code block management
- Conversion of interpreter ops into library functions
- Implement unoptimized/profiling mode JIT first
  - Keep code invalidation in mind
- Optimizing JIT with versioning, start simple
  - First step is recompiling hot code, eliminating profiling
  - Simple versioning
- Interprocedural versioning

