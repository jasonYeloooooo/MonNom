TODO: Blog post, "In Hindsight - How I'd do it Even Better"
Slowly but surely nearing the end of my PhD. Many ideas I won't have time
to explore.

Reg alloc:
- Each block could begin with live value mappings?
- Maybe just a list of live values, ValState nodes
- No liveness analysis, keep live until proven dead?
- Can basically have some kill nodes in the IR
  - or uses that signal they are the last use

TypeSet:
- Negative info should be propagated using bit sets. This would allow having a
  type test, is_object() for all objects at once, and still gain type information.
  May also be able to have multiple kinds of typed arrays and an is_array() test.
- Some amount of constant propagation should be built into versioning. Useful
  for many simple cases. Booleans come to mind. Constant shapes.
- May want to be able to represent uninf types as upposed to unknown/any?
  - Useful for return type inf
- 32-bit index into type table, compact and detailed types
  - can still define basic types, use identity comparison

May want something more sophisticated than a TypeSet bit set
- Propagate constants, shapes, numerical ranges
- Negative information about shapes
  - Useful for inline caches, replicating structure
- Other info we haven't thought of
- Could use a pointer to some type object ***
  - Type objects manipulated in a functional style
  - Can have an extremely rich type representation then
  - exact constants, string constants, precise numerical ranges if desired
  - say that a value is not some shape

Def-use chains:
- Uses of values can redefine type sets
- Ideally, want something more akin to def-use chains
  - Then latest type info can be encoded inside instructions
- Current system already has linked list, firstUse, next, ...
  - This doesn't respect control-flow, however
- Last use can define a type
- Last use can potentially indicate provenance (control flow path)
- Last use is not sufficient to encode register spills/loads
- Could insert spill and load instructions
  - Encourages us to use IR instructions with lower granularity
  - Spills become external to IR instructions
=> Should probably have ValState nodes in the IR

Liveness:
- Can compute it with heuristics
- Certail IR blocks are bottlenecks
  - If a value is not live there, never live after
  - Must be able to exploit such phenomena somehow
- Dominator graph, maybe?

Memory allocation of AST & IR nodes should be thought of from the beginning
- Either zones or pools. Pools probably more flexible/safe.
- Want representation as "flat" as possible, less pointer chasing
  - Large flat array of instruction and label objects?
- No blocks?
  - Two branches possible, one means go straight to the next instr
- Could embed types of live values into blocks or instrs
- Type tags, reg/slot alloc, metainf, should be encoded in the IR if possible
  - instr output can specify reg,slot,tag
  - no external data structures for liveness and metainfo
- Dump it all into big buffer, with pointers
  - or use a table, each entry big enough for any kind of IR node
  - 16 or 32KB, whatever is appropriate for most functions
- *Data-oriented*

Should do transformations at the IR level
- IR needs new constructs to integrate versioning
- Guards? Child sub-versions of other blocks with preconditions?
- Incremental generation, need branch edge "stubs"
- May be possible to completely eliminate the context with
  annotations/guards/metainfo
  - encode all context info in the IR
  - save memory, context lookups are espensive, context objects are big
  - avoid the mutability problem, shared pointers to a mutated context

Incremental inlining at the IR level
- Could try to reg alloc inlined code
- Probably want on-the-fly stack allocation
  - Except for parameters, these get a reserved slot?
- If more stack slots are needed, could resize stack frame
  - Remap slots and invalidate all compiled blocks for the function

Garbage collector, may want GC maps, live variables at GC-ing points along
with known type tags so these don't need to be spilled.

Should use the C stack, match call and return instructions
- CPUs are optimized for this
- Use full words for type tags, for speed and simplicity
  - Reuse words in on-the-fly stack slot allocation
- Want proper calling convention with registers for visible args
  - Can assume that most fns do not use clos argument
  - Pass argc in a reg, even though not used most of the time
    - If not used, not touched
  - Regs for words and types of first 3 args, maybe "this"

